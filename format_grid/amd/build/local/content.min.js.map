{"version":3,"file":"content.min.js","sources":["../../src/local/content.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Grid format Course index main component.\n *\n * @module     format_grid/local/content\n * @class      format_grid/local/content\n * @copyright  2023 G J Barnard based upon work done by:\n * @copyright  2020 Ferran Recio <ferran@moodle.com>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Component from 'core_courseformat/local/content';\n// Course actions is needed for actions that are not migrated to components.\nimport GridDispatchActions from 'format_grid/local/content/actions';\nimport * as CourseEvents from 'core_course/events';\n\nexport default class GridComponent extends Component {\n\n    /**\n     * Constructor hook.\n     *\n     * @param {Object} descriptor the component descriptor\n     */\n    create(descriptor) {\n        // Optional component name for debugging.\n        this.name = 'grid_course_format';\n        // Default query selectors.\n        this.selectors = {\n            SECTION: `[data-for='section']`,\n            SECTION_ITEM: `[data-for='section_title']`,\n            SECTION_CMLIST: `[data-for='cmlist']`,\n            COURSE_SECTIONLIST: `[data-for='course_sectionlist']`,\n            CM: `[data-for='cmitem']`,\n            TOGGLER: `[data-action=\"togglecoursecontentsection\"]`,\n            COLLAPSE: `[data-toggle=\"collapse\"]`,\n            TOGGLEALL: `[data-toggle=\"toggleall\"]`,\n            // Formats can override the activity tag but a default one is needed to create new elements.\n            ACTIVITYTAG: 'li',\n            SECTIONTAG: 'li',\n        };\n        this.selectorGenerators = {\n            cmNameFor: (id) => `[data-cm-name-for='${id}']`,\n            sectionNameFor: (id) => `[data-section-name-for='${id}']`,\n        };\n        // Default classes to toggle on refresh.\n        this.classes = {\n            COLLAPSED: `collapsed`,\n            // Course content classes.\n            ACTIVITY: `activity`,\n            STATEDREADY: `stateready`,\n            SECTION: `section`,\n        };\n        // Array to save dettached elements during element resorting.\n        this.dettachedCms = {};\n        this.dettachedSections = {};\n        // Index of sections and cms components.\n        this.sections = {};\n        this.cms = {};\n        // The page section return.\n        this.sectionReturn = descriptor.sectionReturn ?? null;\n        this.debouncedReloads = new Map();\n    }\n\n    /**\n     * Initial state ready method.\n     *\n     * @param {Object} state the state data\n     */\n    stateReady(state) {\n        this._indexContents();\n        // Activate section togglers.\n        this.addEventListener(this.element, 'click', this._sectionTogglers);\n\n        // Collapse/Expand all sections button.\n        const toogleAll = this.getElement(this.selectors.TOGGLEALL);\n        if (toogleAll) {\n\n            // Ensure collapse menu button adds aria-controls attribute referring to each collapsible element.\n            const collapseElements = this.getElements(this.selectors.COLLAPSE);\n            const collapseElementIds = [...collapseElements].map(element => element.id);\n            toogleAll.setAttribute('aria-controls', collapseElementIds.join(' '));\n\n            this.addEventListener(toogleAll, 'click', this._allSectionToggler);\n            this.addEventListener(toogleAll, 'keydown', e => {\n                // Collapse/expand all sections when Space key is pressed on the toggle button.\n                if (e.key === ' ') {\n                    this._allSectionToggler(e);\n                }\n            });\n            this._refreshAllSectionsToggler(state);\n        }\n\n        if (this.reactive.supportComponents) {\n            // Actions are only available in edit mode.\n            if (this.reactive.isEditing) {\n                new GridDispatchActions(this);\n            }\n\n            // Mark content as state ready.\n            this.element.classList.add(this.classes.STATEDREADY);\n        }\n\n        // Capture completion events.\n        this.addEventListener(\n            this.element,\n            CourseEvents.manualCompletionToggled,\n            this._completionHandler\n        );\n\n        // Capture page scroll to update page item.\n        this.addEventListener(\n            document,\n            \"scroll\",\n            this._scrollHandler\n        );\n    }\n}\n"],"names":["GridComponent","Component","create","descriptor","name","selectors","SECTION","SECTION_ITEM","SECTION_CMLIST","COURSE_SECTIONLIST","CM","TOGGLER","COLLAPSE","TOGGLEALL","ACTIVITYTAG","SECTIONTAG","selectorGenerators","cmNameFor","id","sectionNameFor","classes","COLLAPSED","ACTIVITY","STATEDREADY","dettachedCms","dettachedSections","sections","cms","sectionReturn","debouncedReloads","Map","stateReady","state","_indexContents","addEventListener","this","element","_sectionTogglers","toogleAll","getElement","collapseElementIds","getElements","map","setAttribute","join","_allSectionToggler","e","key","_refreshAllSectionsToggler","reactive","supportComponents","isEditing","GridDispatchActions","classList","add","CourseEvents","manualCompletionToggled","_completionHandler","document","_scrollHandler"],"mappings":";;;;;;;;;u1BA8BqBA,sBAAsBC,iBAOvCC,OAAOC,iBAEEC,KAAO,0BAEPC,UAAY,CACbC,QAAU,uBACVC,aAAe,6BACfC,eAAiB,sBACjBC,mBAAqB,kCACrBC,GAAK,sBACLC,QAAU,6CACVC,SAAW,2BACXC,UAAY,4BAEZC,YAAa,KACbC,WAAY,WAEXC,mBAAqB,CACtBC,UAAYC,IAAQ,sBAAqBA,OACzCC,eAAiBD,IAAQ,2BAA0BA,aAGlDE,QAAU,CACXC,UAAY,YAEZC,SAAW,WACXC,YAAc,aACdjB,QAAU,gBAGTkB,aAAe,QACfC,kBAAoB,QAEpBC,SAAW,QACXC,IAAM,QAENC,cAAgBzB,WAAWyB,eAAiB,UAC5CC,iBAAmB,IAAIC,IAQhCC,WAAWC,YACFC,sBAEAC,iBAAiBC,KAAKC,QAAS,QAASD,KAAKE,wBAG5CC,UAAYH,KAAKI,WAAWJ,KAAK9B,UAAUQ,cAC7CyB,UAAW,OAILE,mBAAqB,IADFL,KAAKM,YAAYN,KAAK9B,UAAUO,WACR8B,KAAIN,SAAWA,QAAQlB,KACxEoB,UAAUK,aAAa,gBAAiBH,mBAAmBI,KAAK,WAE3DV,iBAAiBI,UAAW,QAASH,KAAKU,yBAC1CX,iBAAiBI,UAAW,WAAWQ,IAE1B,MAAVA,EAAEC,UACGF,mBAAmBC,WAG3BE,2BAA2BhB,OAGhCG,KAAKc,SAASC,oBAEVf,KAAKc,SAASE,eACVC,iBAAoBjB,WAIvBC,QAAQiB,UAAUC,IAAInB,KAAKf,QAAQG,mBAIvCW,iBACDC,KAAKC,QACLmB,aAAaC,wBACbrB,KAAKsB,yBAIJvB,iBACDwB,SACA,SACAvB,KAAKwB"}